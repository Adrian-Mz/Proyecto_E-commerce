// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model productos {
  id                 Int                @id @default(autoincrement())
  nombre             String
  descripcion        String
  marca              String?            // Nueva columna para la marca
  especificaciones   String?            // Nueva columna para especificaciones
  precio             Decimal            @default(0.0)
  stock              Int
  garantia           String?
  imagen             String
  categoriaId        Int
  promocionId        Int?
  ivaPorcentaje      Decimal?


  categoria          categorias         @relation(fields: [categoriaId], references: [id])
  promocion          promociones?       @relation(fields: [promocionId], references: [id])

  carritoProductos   carrito_productos[]
  pedidoProductos    pedido_productos[]
  devoluciones     devolucion_productos[]
}

model devolucion_productos {
  id              Int      @id @default(autoincrement())
  devolucionId    Int
  productoId      Int
  cantidad        Int
  motivo          String
  estadoId        Int @default(9) // Por defecto, los productos inician como "Pendiente"
  fechaDevolucion DateTime @default(now())

  devolucion      devoluciones @relation(fields: [devolucionId], references: [id])
  producto        productos    @relation(fields: [productoId], references: [id])
  estado          estado       @relation(fields: [estadoId], references: [id])

  @@unique([devolucionId, productoId])
}

model metodo_pago {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String

  pedidos     pedidos[]
  pagos       pagos[] // Relación con el modelo pagos
}

model pagos {
  id              Int       @id @default(autoincrement())
  pedidoId        Int
  metodoPagoId    Int
  numeroTarjeta   String?   // Almacenar solo los últimos 4 dígitos
  nombreTitular   String
  fechaExpiracion String
  correoContacto  String
  telefonoContacto String
  monto           Decimal   @default(0.0)
  fechaPago       DateTime  @default(now())

  pedido          pedidos   @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  metodoPago      metodo_pago @relation(fields: [metodoPagoId], references: [id])
}

model categorias {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String

  productos   productos[]
  promociones categoria_promocion[] // Relación muchos a muchos
}

model categoria_promocion {
  id            Int          @id @default(autoincrement())
  categoriaId   Int
  promocionId   Int

  categoria     categorias    @relation(fields: [categoriaId], references: [id])
  promocion     promociones   @relation(fields: [promocionId], references: [id])

  @@unique([categoriaId, promocionId]) // Asegura que no se dupliquen combinaciones
}

model promociones {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String
  descuento   Decimal  @default(0.0)
  fechaInicio DateTime?
  fechaFin    DateTime?

  categorias  categoria_promocion[] // Relación muchos a muchos
  productos   productos[]
}

model roles {
  id       Int       @id @default(autoincrement())
  nombre   String    @unique
  usuarios usuarios[]

  @@map("roles")
}

model usuarios {
  id              Int       @id @default(autoincrement())
  nombre          String
  apellido        String
  correo          String    @unique
  password        String
  direccion       String
  telefono        String
  pais            String
  fechaNacimiento DateTime?
  fechaRegistro   DateTime  @default(now())
  rolId           Int       // Relación con roles

  rol             roles     @relation(fields: [rolId], references: [id])
  pedidos         pedidos[]
  carrito         carrito[]
  auditoria       auditoria[] //Relación Inversa con auditoría

  @@map("usuarios")
}

model auditoria {
  id             Int      @id @default(autoincrement())
  usuarioId      Int?
  tabla_afectada String
  accion         String
  registro       String
  descripcion_cambio String?
  fecha_hora     DateTime @default(now())

  usuario        usuarios? @relation(fields: [usuarioId], references: [id])
}

model pedido_productos {
  id              Int      @id @default(autoincrement())
  pedidoId        Int
  productoId      Int
  cantidad        Int
  precio_unitario Decimal  @default(0.0)

  pedido          pedidos   @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  producto        productos @relation(fields: [productoId], references: [id])
}

model pedidos {
  id                 Int      @id @default(autoincrement())
  usuarioId          Int
  direccionEnvio     String
  metodoPagoId       Int
  metodoEnvioId      Int
  estadoId           Int
  total              Decimal  @default(0.0)
  fechaPedido        DateTime @default(now())
  fechaActualizacion DateTime?

  usuario            usuarios @relation(fields: [usuarioId], references: [id])
  metodoPago         metodo_pago @relation(fields: [metodoPagoId], references: [id])
  metodoEnvio        metodo_envio @relation(fields: [metodoEnvioId], references: [id])
  estado             estado @relation(fields: [estadoId], references: [id])
  devoluciones       devoluciones[]
  productos          pedido_productos[]
  pagos              pagos[]
}


model devoluciones {
  id              Int      @id @default(autoincrement())
  pedidoId        Int
  motivo          String
  estadoId        Int
  fechaDevolucion DateTime @default(now())
  fechaResolucion DateTime?

  pedido          pedidos   @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  estado          estado    @relation(fields: [estadoId], references: [id])

  productos       devolucion_productos[]
}

model estado {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String

  pedidos     pedidos[]
  devoluciones devoluciones[]
  devolucion_productos devolucion_productos[]
}

model carrito {
  id          Int      @id @default(autoincrement())
  usuarioId   Int

  usuarios   usuarios @relation(fields: [usuarioId], references: [id])
  productos   carrito_productos[]
}

model carrito_productos {
  id              Int      @id @default(autoincrement())
  carritoId       Int
  productoId      Int
  cantidad        Int
  precio_unitario Decimal  @default(0.0)

  carrito         carrito @relation(fields: [carritoId], references: [id])
  producto        productos @relation(fields: [productoId], references: [id])
}

model metodo_envio {
  id              Int      @id @default(autoincrement())
  nombre          String
  descripcion     String
  costo           Decimal  @default(0.0)
  tiempoEstimado  String

  pedidos         pedidos[]
}